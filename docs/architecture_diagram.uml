//
// vim:syntax=plantuml
//

// Generate PNG image with architecture diagram by using the following command:
// java -jar plantuml.jar architecture_diagram.uml
//
// Generate SVG drawing with architecture diagram by using the following command:
// java -jar plantuml.jar -tsvg architecture_diagram.uml

@startuml
skin rose

header Architecture diagram for OpenShift LightSpeed
footer Copyright Â© 2024 Red Hat, Inc. Author: Pavel Tisnovsky

collections "Configuration" as configuration

package "OpenShift LightSpeed service" as ols {
    component "FastAPI HTTP server" as http
    component "Auth. check" as auth
    component "Query handler" as handler
    component "History" as history
    component "Redactor" as redactor
    component "Question\nvalidator" as question_validator
    component "Document\nsummarizer" as document_summarizer
    component "LLM providers registry" as llm_register
    component "Configuration\nloader" as config_loader
    http -> auth
    auth -> handler
    handler --> history
    handler --> redactor
    handler --> question_validator
    handler --> document_summarizer
    question_validator --> llm_register
    document_summarizer --> llm_register
    llm_register -[hidden]> config_loader
}

component "User data collector" as collector
component "Quota\nlimiter" as quota_limiter
component "Revocation\nscheduler" as quota_revocation

database "RAG\ndatabase" as rag
database "Conversation\ncache" as cache
database "Quota\nstorage" as quota_storage
collections "LLM" as llm
collections "Auth.modules" as auth_modules
collections "Cache interface" as cache_interface
database "Transcripts" as transcripts
collections "Quota limiter\ninterface" as quota_limiter_interface
document_summarizer --> rag
history --> cache_interface : unified cache interface
cache_interface --> cache : configured cache\nimplementation
llm_register --> llm : call selected LLM
handler -> transcripts
handler --> quota_limiter_interface
quota_limiter_interface -> quota_limiter
quota_limiter -> quota_storage
quota_revocation -u-> quota_storage
transcripts -> collector
component "Prometheus"
component "Grafana"

auth -u-> auth_modules : "call selected authentication\nmodule to retrieve\nuser ID and user name"

configuration -u-> config_loader

package "Red Hat VPN" {
   [Ingress] as ingress
   [Pipeline] as pipeline
   database "Ceph\nbucket" as ceph
   ingress --> pipeline : tarball
   pipeline --> ceph : tarball
}

collector -> ingress
http -u-> Prometheus : "expose metrics"
Prometheus -u-> Grafana : visualization

@enduml
