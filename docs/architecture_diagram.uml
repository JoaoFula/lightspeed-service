//
// vim:syntax=plantuml
//

// Generate PNG image with architecture diagram by using the following command:
// java -jar plantuml.jar architecture_diagram.uml
//
// Generate SVG drawing with architecture diagram by using the following command:
// java -jar plantuml.jar -tsvg architecture_diagram.uml

@startuml
skin rose

header Architecture diagram for OpenShift LightSpeed
footer Copyright Â© 2025 Red Hat, Inc. Author: Pavel Tisnovsky

collections "Configuration" as configuration

package "OpenShift LightSpeed service" as ols {
    component "FastAPI HTTP server" as http
    component "Auth. check" as auth
    component "Query handler" as handler
    component "History" as history
    component "Redactor" as redactor
    component "Question\nvalidator" as question_validator
    component "Document\nsummarizer" as document_summarizer
    component "LLM providers\nregistry" as llm_register
    component "Configuration\nloader" as config_loader
    http -> auth
    auth -> handler
    handler -d-> history
    handler -d-> redactor
    handler -d-> question_validator
    handler -d-> document_summarizer
    question_validator --> llm_register
    document_summarizer --> llm_register
    llm_register -[hidden]> config_loader
}

component "User data collector" as collector
component "Quota\nlimiter" as quota_limiter
component "Revocation\nscheduler" as quota_revocation

collections "Agent\nAPI" as agent_api
collections "RAG\ninterface" as rag_interface
document_summarizer -[hidden]> rag_interface
database "RAG\ndatabase" as rag
database "Conversation\ncache" as cache
database "Quota\nstorage" as quota_storage
collections "LLM\ninterface" as llm_interface
component "LLM" as llm
collections "Auth.modules" as auth_modules
collections "Cache\ninterface" as cache_interface
database "Transcripts" as transcripts
collections "Quota limiter\ninterface" as quota_limiter_interface
document_summarizer <-d-> rag_interface
rag_interface <--> rag : configured\nRAG\nindexes
history <--> cache_interface : unified cache interface
cache_interface <--> cache : configured cache\nimplementation
llm_register <--> llm_interface : call LLM
llm_interface <--> llm : call selected LLM
handler -r-> transcripts : written into\nJSON files
handler --> quota_limiter_interface
quota_limiter_interface -> quota_limiter
quota_limiter -> quota_storage
quota_revocation -u-> quota_storage
transcripts -> collector : reads from\nJSON files
component "Prometheus"
component "Grafana"
handler --> agent_api
component "Agent#1" as agent_1
component "Agent#2" as agent_2
agent_api --> agent_1
agent_api --> agent_2

auth <-u-> auth_modules : "call selected authentication\nmodule to retrieve\nuser ID and user name"

collections "Flow control" as flow_control
configuration -u-> config_loader
flow_control -u-> config_loader
configuration -r[hidden]-> flow_control

package "Red Hat VPN" {
   [Ingress] as ingress
   [Pipeline] as pipeline
   database "Ceph\nbucket" as ceph
   ingress --> pipeline : tarball
   pipeline --> ceph : tarball
}

collector -> ingress : REST API\ncall
http -u-> Prometheus : "expose\nconfigured\nmetrics"
Prometheus -u-> Grafana : visualization

@enduml
